<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>title</title>
    <url>/2022/05/22/title/</url>
    <content><![CDATA[<h1 id="dkfadf"><a href="#dkfadf" class="headerlink" title="dkfadf"></a>dkfadf</h1><p>title</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.262ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 5420 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(827,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1296,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1657,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(2207,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2692,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3143,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4021,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4593,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4891,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA_OO 第三单元总结</title>
    <url>/2022/06/05/BUAA-OO-%E7%AC%AC%E4%B8%89%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="BUAA-OO-2022-Unit3-总结"><a href="#BUAA-OO-2022-Unit3-总结" class="headerlink" title="BUAA OO 2022 Unit3 总结"></a>BUAA OO 2022 Unit3 总结</h1><h2 id="自测过程"><a href="#自测过程" class="headerlink" title="自测过程"></a>自测过程</h2><p>在本单元中，我依旧和同学相互合作，有同学负责进行数据生成，我负责对拍程序撰写。然后每次作业之后，都进行自动化测试。这个单元同前几个单元一样，黑盒测试不能完全有效的覆盖所有情况，需要针对 JML 中的描述针对性的构造特殊样例，保证测试的完全覆盖。</p>
<span id="more"></span>
<h3 id="课下测试"><a href="#课下测试" class="headerlink" title="课下测试"></a>课下测试</h3><h4 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h4><p>JUnit中有两个基本对象，一个是TestCase；一个是TestSuite。TestCase可以为测试提供一组方法。比如可以使用setup方法在每项测试开始前建立所需环境，可以用teardown方法销毁测试之后的环境。其他方法可以提供诸如检查变量是否为null、比较变量以及捕捉异常的功能。创建测试的时候只需要继承TestCase类，并且按照需要编写自己的测试方法即可。这部分甚至可以在IDEA的插件帮助下快速完成。因此可以节省大量事件用在编写测试用例上面。一个测试的例子可以详见附录A相关内容。TestSuite是由几个TestCase或者其他TestSuite组成的，通过使用TestSuite我们可以创建测试的一个树形结构。JUnit比较易用、简便。重要的是可以收集很多的Junit测试保证测试回归性。但是正如学长学姐们在讨论区的说明，我确实发现了JUnit的如下问题：</p>
<ul>
<li><p>JUnit的测试需要基于对于JML完全理解的基础上</p>
<p>比如这次JML中有限制群组上限为1111人，getReceivedMessages返回最近的4条消息等。这些条件都是不太容易发现的，如果对于JML阅读不仔细，那么这些条件就可能无法被测试到，从而使用JUnit达不到预期效果</p>
</li>
<li><p>需要提前构造好数据</p>
<p>构造数据需要在编写代码之前构造。之前没有建立起这样的习惯。</p>
</li>
</ul>
<h4 id="课下强测"><a href="#课下强测" class="headerlink" title="课下强测"></a>课下强测</h4><p>这一单元的测试和前两个单元不太一样。这个单元的测试比较固定，确定输入就可以确定输出，所以在测试上可以无脑对拍。在本单元中，我和wxg、ghy、lsz、qs同学一起完成了测试程序的编写和自动化测试部分。其中数据生成部分由wxg同学编写。在数据生成器的编写上，采用了常量池和随机数的经典做法。常量池保证了边界数据范围、随机数保证了测试数据覆盖性。数据生成器中的函数对应着一条指令。数据生成的过程，本质上是根据随机数调用函数产生指令的过程。在此基础上，我们可以编写相应的代码，生成完全图、单组的图等等特殊数据，确保数据强度，和程序鲁棒性。</p>
<h4 id="边界数据"><a href="#边界数据" class="headerlink" title="边界数据"></a>边界数据</h4><p>边界数据的构造一般是通过阅读JML和对于随机生成的数据进行手动重新构造完成的。第一点，就像刚刚提到的，随机生成的数据可能不能很好的保证覆盖到JML规定的所有行为，比如1111人和getReceivedMessages。此时就需要根据JML进行手动构造。第二点，根据随机生成的数据进行手动重新构造也是一种边界数据产生的途径。这种方法常见于前两个单元。随机数据的生成中对于某些侧重点的指令，比如qgvs，在测试的过程中可能就会出现TLE或者WA的问题，此时就可以通过分析随机数据生成的结果，手动构造针对性更强，强度更高的数据。</p>
<h3 id="互测构造"><a href="#互测构造" class="headerlink" title="互测构造"></a>互测构造</h3><p>在三次互测中，我表现的比较佛。一方面是JML规定了实现的方式，所以大家在实现的过程中都大同小异。当我在阅读他人的代码的时候，很难发现他人的问题。另一方面是卡人的数据都是我们课下造好了的，所以可以在互测的过程中直接使用。</p>
<h2 id="图模型构建和维护策略"><a href="#图模型构建和维护策略" class="headerlink" title="图模型构建和维护策略"></a>图模型构建和维护策略</h2><h3 id="作业中的结构"><a href="#作业中的结构" class="headerlink" title="作业中的结构"></a>作业中的结构</h3><p>作业的背景是一个社交网络，但是如果仔细阅读JML会发现，整个系统中person就是一个个节点，relation是点之间的边。而在Network中的各个方法都是维护这个图的方法。比如addRealtion就是在点之间加边；isCircle就是检查两个点之间的连通性；queryBlockSum就是查询这个图中连通块个数；queryLeastConnection是求某个点组成的最小生成树；sendIndirectMessage求出两个点之间最短路等等。</p>
<h3 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h3><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>并查集是一种树形的数据结构，用于处理一些不相交集合的合并和查询问题。并查集通常包含两种方法，分别是查找和合并。查找是查询两个元素是否在同一个集合中；合并是将两个不相交的集合合并成一个集合。在作业中，可以将person作为一个个点，然后relation作为边，将所有认识的人看成一个集合。这样查询两个人是否认识，就是查询两个人是否在一个集合中；而addRelation中添加两个人的认识关系，就是将AB两个人分别所在的集合合并起来，这正好对应了并查集中的查找和合并操作。使用并查集后，可以简化queryBlockSum和isCircle的查询速度。具体的实现方法就是采用”代表元“法，就是每个集合选择一个固定的元素作为整个集合的代表元素。</p>
<p>这里给出一种经典的C++语言实现并查集的方法，可以作为Java语言实现参考：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 并查集的存储</span></span><br><span class="line"><span class="type">int</span> fa[SIZE];</span><br><span class="line"><span class="comment">// 2. 并查集的初始化</span></span><br><span class="line"><span class="comment">// 假设有 n 个元素，起初所有元素各自构成一个独立的集合，即有n棵1个点的树。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line"><span class="comment">// 3. 并查集的 Get 操作</span></span><br><span class="line"><span class="comment">// 若x是树根，则x就是集合的代表，否则递归访问fa[x]直到根节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = <span class="built_in">get</span>(fa[x]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 4. 并查集的 Merge 操作</span></span><br><span class="line"><span class="comment">// 合并元素x和元素y所在的集合，等价于让x的树根作为y的树根的子节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">    fa[<span class="built_in">get</span>(x)] = <span class="built_in">get</span>(y);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>并查集的算法中还有按秩合并等优化方法，但是经过实测优化程度不大。所以有兴趣自己学吧。</p>
<h4 id="克鲁斯卡尔算法（最小生成树）"><a href="#克鲁斯卡尔算法（最小生成树）" class="headerlink" title="克鲁斯卡尔算法（最小生成树）"></a>克鲁斯卡尔算法（最小生成树）</h4><p>queryLeastConnection这个函数是求某个点可达的所有点组成的最小生成树。在这个方面有prim算法和kruskal算法可选。最后我选择了kruskal算法，因为<strong>我维护了边的序列</strong>而且<strong>实现了判断两个两个点是否联通的简单方法</strong>。这个算法的思想是将所有边按照权重大小排序，从小到大选择依次选择每条边，如果这条边加入最小生成树的答案中没有使当前图出现回路即可。如果这个点所在的连通集有n个点，则根据定义，他的最小生成树一定有n-1条边。优化方法：判断加边后是否出现回路——维护一个并查集，并查集表示和某个点联通的所有点集，只要待加入的边两端的点不在同一个点集内即可；边按照权重排序——维护一个有序的边序列，这部分可以使用二分法找到合适的位置插入。这里给出一个C++经典实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">rec</span> {<span class="type">int</span> x, y, z;} edge[MAX];</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(rec a, rec b) {</span><br><span class="line">    <span class="keyword">return</span> a.z &lt; b.z;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">get</span>(edge[i].x);</span><br><span class="line">        <span class="type">int</span> y = <span class="built_in">get</span>(edge[i].y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</span><br><span class="line">        fa[x] = y;</span><br><span class="line">        ans += edge[i].z;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="迪杰斯特拉算法（最短路）"><a href="#迪杰斯特拉算法（最短路）" class="headerlink" title="迪杰斯特拉算法（最短路）"></a>迪杰斯特拉算法（最短路）</h4><p>sendIndirectMessage这个方法所求的是两个点之间的最短路。求单源最短路这个问题的模型是，给定一张有向图，（x，y，z）表示从点x到点y长度为z的有向边。这个问题中经典的方法有Dijkstra方法，这是一个贪心算法，它适用于所有边都是非负数的图。当边长z都是非负数时，全局最小值不可能被其他点更新，故选出的最短的节点x必然满足：dist[x]已经是起点到x的最短路，不断选择最短路就能对全局所有点更新最短路。这里由于求两个特定点之间的最短路，因此可以使用剪枝方法：如果当前找到的点就是id2，当即退出。这里给出一个经典的C++算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) {</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (v[x]) <span class="keyword">continue</span>;</span><br><span class="line">        v[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = next[i]) {</span><br><span class="line">            <span class="type">int</span> y = ver[i], z = edge[i];</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x] + z) {</span><br><span class="line">                d[y] = d[x] + z;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-d[y], y));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>这里使用了大根堆，并且插入负数变成小根堆。Java中含有堆容器，但是这里可以使用二分法就如上面一样，无非就是维护一个有序的集合。</p>
<h2 id="性能问题和修复策略"><a href="#性能问题和修复策略" class="headerlink" title="性能问题和修复策略"></a>性能问题和修复策略</h2><h3 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h3><p>JML之提供一个参考的数据存储容器，可以使用ArrayList，也可以根据实际需要选择不同的容器。由于每个人的id不同，我们可以选择HashMap存储每个人的id到Person的关系，来达到快速访问。</p>
<p>Network</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Person&gt; people;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Group&gt; groups;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">qbsAns</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//private final ArrayList&lt;Message&gt; messages;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Message&gt; messages;</span><br><span class="line"><span class="comment">//private HashMap&lt;Person, Person&gt; fathers = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Person&gt; fathers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;Edge&gt; edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Integer&gt; emojiMessages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Integer&gt; dist = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p>Group</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Person&gt; people;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">valueSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">ageSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>Person</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> socialValue;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> money;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Person&gt; acquaintance;  <span class="comment">// id - person</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Person, Integer&gt; value; <span class="comment">// person - value</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;Message&gt; messages = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<h3 id="代码编写和维护"><a href="#代码编写和维护" class="headerlink" title="代码编写和维护"></a>代码编写和维护</h3><p>在代码编写的时候随时维护答案，维护边集有序、维护并查集</p>
<p>例如qbs指令查询当前有多少个联通块，这样可以在，addPerson的时候、addRelation的时候更新qbs的值；</p>
<p>边集有序维护的方法：</p>
<p>使用二分法，找到新边的合适位置，在插入进去，用时O(logn + n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(ArrayList&lt;Edge&gt; arrayList, Edge edge)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> arrayList.size();</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> edge.getValue();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">        mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (value &gt; arrayList.get(mid).getValue()) {</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            r = mid;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    arrayList.add(l, edge);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>并查集维护方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//private Person findFather(HashMap&lt;Person, Person&gt; fa, Person person) {</span></span><br><span class="line"><span class="keyword">private</span> Person <span class="title function_">findFather</span><span class="params">(HashMap&lt;Integer, Person&gt; fa, Person person)</span> {</span><br><span class="line">    <span class="keyword">if</span> (fa.get(person.getId()) == person) {</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">father</span> <span class="operator">=</span> findFather(fa, fa.get(person.getId()));</span><br><span class="line">        <span class="comment">//fa.put(person, father);</span></span><br><span class="line">        fa.put(person.getId(), father);</span><br><span class="line">        <span class="keyword">return</span> father;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="Network-扩展"><a href="#Network-扩展" class="headerlink" title="Network 扩展"></a>Network 扩展</h2><h3 id="扩展要求"><a href="#扩展要求" class="headerlink" title="扩展要求"></a>扩展要求</h3><p>假设出现了几种不同的Person</p>
<ul>
<li>Advertiser：持续向外发送产品广告</li>
<li>Producer：产品生产商，通过Advertiser来销售产品</li>
<li>Customer：消费者，会关注广告并选择和自己偏好匹配的产品来购买 — 所谓购买，就是直接通过Advertiser给相应Producer发一个购买消息</li>
<li>Person：吃瓜群众，不发广告，不买东西，不卖东西</li>
</ul>
<p>如此Network可以支持市场营销，并能查询某种商品的销售额和销售路径等 请讨论如何对Network扩展，给出相关接口方法，并选择3个核心业务功能的接口方法撰写JML规格（借鉴所总结的JML规格模式）</p>
<h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><p><strong>框架：</strong>Advertiser、Producer和Customer继承自Person；增加Advertisement和Product，继承自Message；Customer中增加偏好，偏好用一个32位的数表示，每一位代表一种爱好；Product中同样包含着一个32位的int类型的数，表示产品的具有的属性。当产品的属性和顾客的偏好有交集时，顾客会购买产品。</p>
<p><strong>增加异常：</strong></p>
<p><strong>方法1：</strong>Advertiser发送广告</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@ public normal_behavior</span></span><br><span class="line"><span class="comment">	@ requires (\exists int i; 0 &lt;= i &amp;&amp; i &lt; people.length; people[i].getId() == id &amp;&amp; people[i] instanceof Advertiser);</span></span><br><span class="line"><span class="comment">	@ ensures getPerson(id).advertisements.length == \old(getPerson(id).advertisements.length) - 1;</span></span><br><span class="line"><span class="comment">	@ ensures (\forall int i; 0 &lt;= i &amp;&amp; i &lt; people.length; (getPerson(id).isLinked(people[i])) ==&gt; (people[i].messages.length == \old(people[i].messages.length) + 1 &amp;&amp; people[i].messages[0] == \old(getPerson(id).advertisements[0]) &amp;&amp; (\forall int j; 1 &lt;= j &amp;&amp; j &lt; people[i].messages.length; people[i].messages[j] == \old(people[i].messages[j - 1]))));</span></span><br><span class="line"><span class="comment">	@ ensures (\forall int i; 0 &lt;= i &amp;&amp; i &lt; people.length; !(getPerson(id).isLinked(people[i])) ==&gt; (people[i].messages.length == \old(people[i].messages.length &amp;&amp; (\forall int j; 0 &lt;= j &amp;&amp; j &lt; people[i].messages.length; people[i].messages[j] == \old(people[i].messages[j]))));</span></span><br><span class="line"><span class="comment">	@ public exceptional_behavior </span></span><br><span class="line"><span class="comment">	@ signals (PersonIdNotFoundException e) (\forall int i; 0 &lt;= i &amp;&amp; i &lt; people.length; people[i].getId() != id || (people[i].getId() == id &amp;&amp; !people[i] instanceof Advertiser));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendAdvertisement</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> PersonIdNotFoundException;</span><br></pre></td></tr></table></figure>
<p><strong>方法2：</strong>查询销量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@ public normal_behavior</span></span><br><span class="line"><span class="comment">	@ requires (\exists int i; 0 &lt;= i &amp;&amp; i &lt; people.length; people[i].getId() == id &amp;&amp; people[i] instanceof Producer);</span></span><br><span class="line"><span class="comment">	@ requires (\exists int i; 0 &lt;= i &amp;&amp; i &lt; getPerson(id).products.length; getPerson(id).products[i].getId() == productId);</span></span><br><span class="line"><span class="comment">	@ \results == getPerson(id).getProduct(productId).money * (\sum int i; 0 &lt;= i &amp;&amp; i &lt; people.length; (\exists int j; 0 &lt;= j &amp;&amp; j &lt; people[i].products.length; prople[i].products[j].equals(getPerson(id).getProduct(productId))));</span></span><br><span class="line"><span class="comment">	@ public exceptional_behavior</span></span><br><span class="line"><span class="comment">	@ signals (PersonIdNotFoundException e) !(\exists int i; 0 &lt;= i &amp;&amp; i &lt; people.length; people[i].getId() == id &amp;&amp; people[i] instanceof Producer)</span></span><br><span class="line"><span class="comment">	@ public exceptional_behavior</span></span><br><span class="line"><span class="comment">	@ signals (ProductNotFoundException e) !(\exists int i; 0 &lt;= i &amp;&amp; i &lt; getPerson(id).products.length; getPerson(id).products[i].getId() == productId);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">querySalaryValue</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> productId)</span> <span class="keyword">throws</span> PersonIdNotFoundException, ProductIdNotFoundException;</span><br></pre></td></tr></table></figure>
<p><strong>方法3：</strong>顾客根据广告购买产品</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@ public normal_behavior</span></span><br><span class="line"><span class="comment">	@ requires (\exists int i; 0 &lt;= i &amp;&amp; i &lt; people.length; people[i].getId() == id &amp;&amp; people[i] instanceof Customer);</span></span><br><span class="line"><span class="comment">	@ requires (\forall int i; 0 &lt;= i &amp;&amp; i &lt; getPerson(id).advertisemens.length; getPerson(id).money &lt; advertisements[i].money || getPerson(id).preferInfo &amp; advertisements[i].productInfo == 0 || (\exists int j; 0 &lt;= j &amp;&amp; j &lt; \old(getPerson(id).products.length); \old(getPerson(id).products[j]).equals(getPerson(id).advertisements[i].product)));</span></span><br><span class="line"><span class="comment">	@ requires \old(getPerson(id).money) == getPerson(id).money + (\sum int i; 0 &lt;= i &amp;&amp; i &lt; \old(getPerson(id).advertisements.length); (getPerson(id).advertisement.contains(\old(getPerson(id).advertisements[i]))) ==&gt; \old(getPerson(id).advertisements[i]).money);</span></span><br><span class="line"><span class="comment">	@ signals (PersonIdNotFoundExeception e) !(\exists int i; 0 &lt;= i &amp;&amp; i &lt; people.length; people[i].getId() == id &amp;&amp; people[i] instanceof Customer);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">purchase</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> PersonIdNotFoundException, ProductIdNotFoundException;</span><br></pre></td></tr></table></figure>
<h2 id="学习体会"><a href="#学习体会" class="headerlink" title="学习体会"></a>学习体会</h2><p><strong>规格化设计：</strong>本单元中主要学习了什么是规格化设计和契约式设计。规格化设计就是定义一个开发人员必须遵守的规约。对于一个类来说，类包含数据规格和方法规格。</p>
<ul>
<li>数据规格：类所管理的数据内容，及其有效性条件（invariant，constraint）<ul>
<li>invariant：任何时刻数据内容都必须满足的约束条件</li>
<li>constraint：任何时刻对于数据内容的修改都必须满足的条件</li>
</ul>
</li>
<li>方法规格：类所规定的操作，权利 + 义务 + 注意事项，包括前置条件 + 后置条件 + 副作用<ul>
<li>前置条件：规定了开发人员可以依赖的初始条件</li>
<li>后置条件：开发人员必须保证的需求满足结果</li>
</ul>
</li>
</ul>
<p>规格化设计中，比较重要的是契约式编程，这部分可以看<strong>附录B</strong></p>
<p><strong>基于JML的规格模式：</strong>规格是对于数据和方法方方面面的约束，规格模式是对于规格的设计。在这方面JML是一种规格设计的模型语言。</p>
<ul>
<li><p>JML定义了许多描述规格的方法和语法，具体内容可以参考<strong>附录C</strong></p>
</li>
<li><p>JML写好了可以清楚明白的传递规格的定义和编写者思想，没有自然语言的二义性，因为一切条件和限制都清清楚楚的写到规格定义中了，通过阅读JML任何人都可以或者规格的定义，即使一个人最开始不知道什么是“最短路”，什么是”连通图“，通过反复阅读JML最终也能够理解；但是JML同样也有缺点，就是比较复杂，这一点从助教团队不断的修改指导书也能看出来，刚刚Network扩展任务中我也感受到了这一点，短短几句话就能说明白的事情，往往需要写很多JML。</p>
</li>
<li>而且我认为<strong>JML</strong>具有一种依赖性，它把自然语言和抽象的规格说明分割开了。用自然语言说明一个方法的时候，可能暗含一些条件，不用说大家都能明白的那种；但是在JML中，这些应说未说的条件需要全部写出来，这对于编写者是一个挑战，因为一些理所应当、稀疏平常的条件不太容易一下子想起来。当阅读者阅读到JML的时候，又会切断自然思考的模式，就着JML推测编写者的含义，这时候如果一些条件没写出来，很容易出现读者”较真“的情况，或者<strong>在讨论区问一些看似没有必要问</strong>的问题，这一点在三四单元都很容易出现，所以<strong>第四单元助教甚至开了一个精华帖子</strong>。这种”较真“的情况恰恰说明了JML隔绝了人们使用自然语言的思考。</li>
</ul>
<h2 id="附录A-JUnit-测试方法"><a href="#附录A-JUnit-测试方法" class="headerlink" title="附录A JUnit 测试方法"></a>附录A JUnit 测试方法</h2><ol>
<li><p>确定我们要实现的契约</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">require</span><br><span class="line">    count &lt;= capacity</span><br><span class="line">    not key.empty </span><br><span class="line">ensure</span><br><span class="line">    <span class="title function_">has</span> <span class="params">(x)</span></span><br><span class="line">    item (key) = <span class="type">x</span></span><br><span class="line">    <span class="variable">count</span> <span class="operator">=</span> old count + <span class="number">1</span></span><br><span class="line">invariant</span><br><span class="line">    <span class="number">0</span> &lt;= count</span><br><span class="line">    count &lt;= capacity</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定 JUnit 测试点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invariant count &lt;= capacity</span><br><span class="line">invariant <span class="number">0</span> &lt;= count</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_creates_dictionary_with_specified_capacity</span><span class="params">()</span> {</span><br><span class="line">        assertThat(<span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">5</span>).capacity(), is(equalTo(<span class="number">5</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">invariant count &lt;= capacity</span><br><span class="line">invariant <span class="number">0</span> &lt;= count</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">on_creation_the_count_is_zero</span><span class="params">()</span> {</span><br><span class="line">        assertThat(<span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">5</span>).count(), is(equalTo(<span class="number">0</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">invariant count &lt;= capacity</span><br><span class="line">invariant <span class="number">0</span> &lt;= count</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_rejects_a_negative_capacity</span><span class="params">()</span> {</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Dictionary</span>(-<span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">ensure <span class="title function_">has</span> <span class="params">(x)</span></span><br><span class="line">ensure <span class="title function_">item</span> <span class="params">(key)</span> = x</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">an_entry_can_be_added_and_looked_up_by_its_key</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        dict.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        assertThat(dict.get(<span class="string">"key1"</span>), is(equalTo(<span class="string">"value1"</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="type">ensure</span> <span class="variable">count</span> <span class="operator">=</span> old count + <span class="number">1</span>    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">after_adding_an_entry_the_count_is_increased_by_one</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedCount</span> <span class="operator">=</span> dict.count() + <span class="number">1</span>;</span><br><span class="line">        dict.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        assertThat(dict.count(), is(equalTo(expectedCount)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">require not key.empty</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_will_not_accept_an_entry_with_a_null_key</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                dict.put(<span class="literal">null</span>, <span class="string">"value1"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">require not key.empty</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_will_not_accept_an_entry_with_an_empty_key</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                dict.put(<span class="string">""</span>, <span class="string">"value1"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">require count &lt;= capacity</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_will_not_accept_an_entry_when_it_is_full</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        dict.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                dict.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DictionaryTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_creates_dictionary_with_capacity_5</span><span class="params">()</span> {</span><br><span class="line">        assertThat(<span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">5</span>).capacity(), is(equalTo(<span class="number">5</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_creates_dictionary_with_capacity_1000</span><span class="params">()</span> {</span><br><span class="line">        assertThat(<span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1000</span>).capacity(), is(equalTo(<span class="number">1000</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">on_creation_the_count_is_zero</span><span class="params">()</span> {</span><br><span class="line">        assertThat(<span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">5</span>).count(), is(equalTo(<span class="number">0</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_rejects_a_negative_capacity</span><span class="params">()</span> {</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Dictionary</span>(-<span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">an_entry_can_be_added_and_looked_up_by_its_key</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        dict.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        assertThat(dict.get(<span class="string">"key1"</span>), is(equalTo(<span class="string">"value1"</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">after_adding_an_entry_the_count_is_increased_by_one</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedCount</span> <span class="operator">=</span> dict.count() + <span class="number">1</span>;</span><br><span class="line">        dict.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        assertThat(dict.count(), is(equalTo(expectedCount)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_will_not_accept_an_entry_with_a_null_key</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                dict.put(<span class="literal">null</span>, <span class="string">"value1"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_will_not_accept_an_entry_with_an_empty_key</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                dict.put(<span class="string">""</span>, <span class="string">"value1"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">it_will_not_accept_an_entry_when_it_is_full</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dictionary</span>(<span class="number">1</span>);</span><br><span class="line">        dict.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        assertThrows(ContractViolationException.class, ()-&gt;</span><br><span class="line">                dict.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>));</span><br><span class="line">    }</span><br><span class="line">} </span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么我们不直接使用 if 方法？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dictionary(<span class="type">int</span> capacity) {</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    contents = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(capacity);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dictionary(<span class="type">int</span> capacity) {</span><br><span class="line">    Contract.require(capacity &gt; <span class="number">0</span>,</span><br><span class="line">                     <span class="string">"Capacity must be greater than zero"</span>);</span><br><span class="line">    <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    contents = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(capacity);</span><br><span class="line">} </span><br></pre></td></tr></table></figure>
<p>上下两种方法都可以实现前置条件和后置条件的检测。我们要选择哪个？上面那种方法固然可以实现检测前置条件，但是这里的 if 和程序正常逻辑中的if有什么分别？如果不给这个特殊的if一个特殊的含义，这是否会干扰我们后续检查代码？</p>
</li>
<li><p>最终</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;string,object&gt; contents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dictionary</span><span class="params">(<span class="type">int</span> capacity)</span> {</span><br><span class="line">        Contract.require(capacity &gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">"Capacity must be greater than zero"</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        contents = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(capacity);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> {</span><br><span class="line">        Contract.require(StringUtils.isNotEmpty(key),</span><br><span class="line">            <span class="string">"Key cannot be empty"</span>);</span><br><span class="line">        Contract.require(contents.size() &lt; capacity,</span><br><span class="line">            <span class="string">"Dictionary is full"</span>);</span><br><span class="line">        contents.put(key, value);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> { <span class="keyword">return</span> contents.get(key); }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">capacity</span><span class="params">()</span> { <span class="keyword">return</span> capacity; }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> { <span class="keyword">return</span> contents.size(); }</span><br><span class="line">}    </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Contract</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">require</span><span class="params">(<span class="type">boolean</span> expression, String message)</span> {</span><br><span class="line">        <span class="keyword">if</span> (!expression) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ContractViolationException</span>(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="附录B-契约式编程-design-by-contract"><a href="#附录B-契约式编程-design-by-contract" class="headerlink" title="附录B 契约式编程 design by contract"></a>附录B 契约式编程 design by contract</h2><h3 id="什么是契约式编程？"><a href="#什么是契约式编程？" class="headerlink" title="什么是契约式编程？"></a>什么是契约式编程？</h3><p>契约式编程于1980年代由 Bertrand Mayer 提出，这是一种软件设计方法，侧重于指定软件、方法之间交互的契约。软件的运行中，各个方法之间的交互可以看成是客户端-服务器模式（client-server model），服务器做出需要某些承诺或者叫做契约来向客户端提供服务，同时客户端必须遵守这些承诺，否则将无法保证可以得到服务器的服务。上述契约一般是使用服务器时的前置条件，通常也包含后置条件和不变式（invariant）。从中我们可以提炼出一个一般的思想：Hoare triples（霍尔三元组），它是由计算机科学家 Tony Hoare 在1969年提出的概念，我们可以通过考虑一段代码的执行如何改变计算状态来推理软件的正确性。基本的公式是：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.733ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4302 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(1251,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mi" transform="translate(1751,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(2511,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(3011,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(3802,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></p>
<p>P 表示前置条件（Post Condition），C 代表计算（Calculation），Q代表后置条件（Post Condition）。前置条件和后置条件都使用谓词逻辑（predicate logic, also known as <em>first-order logic</em>）进行表述。在 DbC 中，不变式是某些数据结构或者系统状态不会在计算过程中被改变或者影响的方面。</p>
<h4 id="跳出-Java，来到更大的世界"><a href="#跳出-Java，来到更大的世界" class="headerlink" title="跳出 Java，来到更大的世界"></a>跳出 Java，来到更大的世界</h4><p>由于我们的课程叫做面向对象程序设计，不是java程序设计，所以我想介绍一些契约式编程在 java 之外的应用（为什么强调应用在 Java？因为我们可以从这两次的作业中看到，虽然 JML 语言应用了契约式编程思想，但是仍然需要在方法前面写一堆谓词逻辑来保证行为的正确性。而且这种逻辑很容易写错<del>助教修订了很多次对吧</del>）。契约式编程的创始人 Mayer 创造了这样的一种规范化的定义，但是Mayer 并没有止步于此，他还开发了一种编程语言，其中内置了契约式编程，并且借此提高编译速度——Eiffel 语言。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">class DICTIONARY [ELEMENT]</span><br><span class="line">feature</span><br><span class="line">	put (x: ELEMENT;<span class="built_in"> key</span>: STRING) <span class="literal">is</span></span><br><span class="line">			-- Insert x so that it will be retrievable</span><br><span class="line">			-- through<span class="built_in"> key</span>.</span><br><span class="line">		require</span><br><span class="line">		<span class="built_in">	count</span> &lt;= capacity</span><br><span class="line">		<span class="built_in">	not</span><span class="built_in"> key</span><span class="built_in">.empty</span> </span><br><span class="line">		ensure</span><br><span class="line">			has (x)</span><br><span class="line">			<span class="type">item</span> <span class="built_in">(key</span>) = x</span><br><span class="line">		<span class="built_in">	count</span> = old<span class="built_in"> count</span> + <span class="number">1</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	... Interface specifications <span class="keyword">of</span> other features ...</span><br><span class="line"></span><br><span class="line">invariant</span><br><span class="line">	<span class="number">0</span> &lt;=<span class="built_in"> count</span></span><br><span class="line"><span class="built_in">	count</span> &lt;= capacity</span><br><span class="line"><span class="keyword">end</span>	</span><br></pre></td></tr></table></figure>
<p>require 关键字定义了前置条件，在这里比如数量小于总容量，不能添加没有key的元素等</p>
<p>ensure 关键字定义了后置条件，比如说这里保证了 put 方法之后一定含有这个元素，新的count为原count+1等</p>
<p>invariant 关键字定义了不随计算改变的整个系统的状态，所以他的范围比require和ensure更大，在这里比如count大于等于0，count小于总容量等限制条件。</p>
<h3 id="契约式编程不只是测试"><a href="#契约式编程不只是测试" class="headerlink" title="契约式编程不只是测试"></a>契约式编程不只是测试</h3>

<h4 id="一个可能的应用场景"><a href="#一个可能的应用场景" class="headerlink" title="一个可能的应用场景"></a>一个可能的应用场景</h4><p>在微服务器日益普及，某个给定的应用程序可能由许多素未谋面的人独立开发出来；用时客户从注册表中查找某个服务，也常常不清楚他们正在调用的服务接口到底是什么样子的。在互联网的环境中，程序的运行环境不再像我们本机一样可靠和安全，不确定的输入和攻击可能从四面八方涌来。当我们的软件或者方法被其他使用者调用时，DbC 提供了一种确保代码仍然能够可靠运行的方法。</p>
<h3 id="契约式编程的广泛应用"><a href="#契约式编程的广泛应用" class="headerlink" title="契约式编程的广泛应用"></a>契约式编程的广泛应用</h3><p><strong>Java</strong></p>
<p>在 java 中我们可以使用某些插件来使用契约式编程，比如 COFOJA 和 ANNOTATED-CONTRACTS。Cofoja 是谷歌开发团队在2011年左右开始的项目，大约在2015年左右火了一把，之后就一直萎靡不振。在这个插件中有三种关键的定义</p>
<ul>
<li>@Requires ——方法前置条件</li>
<li>@Ensures ——方法后置条件</li>
<li>@Invariant ——类或者接口不变量</li>
</ul>
<p><strong>缺点：</strong>有不少使用者反映这个插件不是很好用，不变量的使用不如自己手写。而且 IDEA 对这个插件不是完全兼容。</p>
<p>Sebastian Hoss 为 Java 创造了一个基于注释的库，可以支持一部分DbC 指令，</p>
<p>。。。</p>
<p>契约式编程还有许多其他广泛的应用场景，比如 <strong>.Net 语言、Ruby、JavaScript、Python、Golang</strong></p>
<h2 id="附录C-JML-表达式"><a href="#附录C-JML-表达式" class="headerlink" title="附录C JML 表达式"></a>附录C JML 表达式</h2><h3 id="原子表达式（略）"><a href="#原子表达式（略）" class="headerlink" title="原子表达式（略）"></a>原子表达式（略）</h3><ol>
<li><code>\result</code>：表示一个非 void 类型的方法执行所获得的结果，即方法执行后的返回值。</li>
<li><code>\old(expr)</code>：表示一个表达式<code>expr</code>在相应方法执行前的取值，该表达式涉及到评估<code>expr</code>中的对象是否发生变化。<br><em>如果是引用（如hashmap)，对象没改变，但进行了插入或删除操作。v和odd(v)也有相同的取值。</em></li>
<li><code>\not_assigned(x,y,...)</code>：用来表示括号中的变量是否在方法执行过程中被赋值。如果没有被赋值，返回为true ，否则返回 false 。用于后置条件的约束，限制一个方法的实现不能对列表中的变量进行赋值。</li>
<li><code>\not_modified(x,y,...)</code>：该表达式限制括号中的变量在方法执行期间的取值未发生变化。</li>
<li><code>\nonnullelements(container)</code>：表示container对象中存储的对象不会有null。</li>
<li><code>\type(type)</code>：返回类型type对应的类型(Class)，如type(boolean)为Boolean.TYPE。TYPE是JML采用的缩略表示，等同于Java中的 java.lang.Class。</li>
<li><code>\typeof(expr)</code>：该表达式返回expr对应的准确类型。如<code>\typeof(false)</code>为Boolean.TYPE。</li>
</ol>
<h3 id="量化表达式（略）"><a href="#量化表达式（略）" class="headerlink" title="量化表达式（略）"></a>量化表达式（略）</h3><ol>
<li><code>\forall</code>：全称量词修饰的表达式，表示对于给定范围内的元素，每个元素都满足相应的约束。</li>
<li><code>\exists</code>：存在量词修饰的表达式，表示对于给定范围内的元素，存在某个元素满足相应的约束。</li>
<li><code>\sum</code>：返回给定范围内的表达式的和。</li>
<li><code>\product</code>：返回给定范围内的表达式的连乘结果。</li>
<li><code>\max</code>：返回给定范围内的表达式的最大值。</li>
<li><code>\min</code>：返回给定范围内的表达式的最小值。</li>
<li><code>\num_of</code>：返回指定变量中满足相应条件的取值个数。可以写成<code>(\num_of T x; R(x);P(x))</code>，其中T为变量x的类型，R(x)为x的取值范围；P(x)定义了x需要满足的约束条件。从逻辑上来看，该表达式也等价于<code>(\sum T x;R(x)&amp;&amp;P(x);1)</code>。</li>
</ol>
<h3 id="集合表达式（略）"><a href="#集合表达式（略）" class="headerlink" title="集合表达式（略）"></a>集合表达式（略）</h3><p>可以在JML规格中构造一个局部的集合（容器），明确集合中可以包含的元素。集合构造表达式的一般形式为：<code>new ST {T x|R(x)&amp;&amp;P(x)}</code>，其中的R(x)对应集合中x的范围，通常是来自于某个既有集合中的元素，如s.has(x)，P(x)对应x取值的约束。</p>
<h3 id="操作符（略）"><a href="#操作符（略）" class="headerlink" title="操作符（略）"></a>操作符（略）</h3><ul>
<li><code>E1&lt;:E2</code>子类型操作符：如果类型E1是类型E2的子类型(sub type)或相同类型，则该表达式的结果为真，否则为假。任意一个类X，都必然满足<code>X.TYPE&lt;:Object.TYPE</code>。</li>
<li><code>b_expr1&lt;==&gt;b_expr2</code>或<code>b_expr1&lt;=!=&gt;b_expr2</code>等价关系操作符：其中b_expr1和b_expr2都是布尔表达式。</li>
<li><code>b_expr1==&gt;b_expr2</code>或<code>b_expr1&lt;==b_expr2</code>推理操作符：相当于离散的-&gt;，只有（1，0）是false。</li>
<li><code>\nothing</code>或<code>\everthing</code>变量引用操作符：表示当前作用域访问的所有变量。前者空集，后者全集。变量引用操作符经常在<code>assignable</code>句子中使用，如 <code>assignable \nothing</code>表示当前作用域下每个变量都不可以在方法执行过程中被赋值。</li>
</ul>
]]></content>
      <tags>
        <tag>BUAA_OO</tag>
      </tags>
  </entry>
</search>
